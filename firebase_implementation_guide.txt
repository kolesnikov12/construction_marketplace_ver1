# Canada Construction Marketplace - Firebase Implementation Guide

This guide details how to implement the Firebase-based backend for the Construction Marketplace application using Cloud Firestore and Firebase Storage, following the BLoC pattern for state management.

## Architecture Overview

### Models

We've created dedicated model classes for each data entity:
- `User` - User profile information
- `Category` - Categories and subcategories of construction materials
- `Tender` - Requests for construction materials with specific requirements
- `Listing` - Offers to sell construction materials
- `TenderItem` - Items included in tenders
- `ListingItem` - Items included in listings

### BLoC Pattern Components

Our implementation follows a clean BLoC architecture:
1. **Events** - User actions that trigger state changes
2. **States** - Different states the UI can be in
3. **Blocs** - Business logic components that process events and emit states
4. **Repositories** - Data access layer for Firestore/Storage operations

### Firebase Integration

- **Firestore Database** - Stores all application data
- **Firebase Storage** - Stores user photos, tender attachments, and listing images
- **Firebase Authentication** - Handles user authentication

## Implementation Steps

### 1. Firebase Setup

1. Create a Firebase project in the [Firebase Console](https://console.firebase.google.com/)
2. Add your application to the project
3. Enable Firestore Database
4. Enable Firebase Storage
5. Enable Authentication with Email/Password

### 2. Firestore Database Structure

Set up the following collections in Firestore:

- **users** - User profiles
- **tenders** - Tender requests
- **listings** - Material listings
- **bids** - Bids on tenders
- **messages** - Messages between users

### 3. Security Rules

Apply the provided security rules to your Firestore database:

```
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - only the user can write to their own profile
    match /users/{userId} {
      allow read: if true; // Allow all users to read profiles
      allow create: if request.auth != null; // Allow authenticated users to create profiles
      allow update, delete: if request.auth != null && request.auth.uid == userId; // Only owner can update/delete
    }

    // Tenders - can be read by anyone, but only created/updated by authenticated users
    match /tenders/{tenderId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
        (resource.data.userId == request.auth.uid || request.resource.data.userId == request.auth.uid);
    }

    // Listings - can be read by anyone, but only created/updated by authenticated users
    match /listings/{listingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
        (resource.data.userId == request.auth.uid || request.resource.data.userId == request.auth.uid);
    }

    // Bids on tenders - can be read by the tender owner and the bidder
    match /bids/{bidId} {
      allow read: if request.auth != null &&
        (resource.data.userId == request.auth.uid ||
         get(/databases/$(database)/documents/tenders/$(resource.data.tenderId)).data.userId == request.auth.uid);
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Messages between users
    match /messages/{messageId} {
      allow read: if request.auth != null &&
        (resource.data.senderId == request.auth.uid || resource.data.recipientId == request.auth.uid);
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
    }
  }
}
```

### 4. Firebase Storage Rules

Apply these security rules to Firebase Storage:

```
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /profile_images/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /tenders/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /listings/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
```

### 5. Firebase Indexes

Create the recommended indexes in the Firebase Console to optimize queries:

- Collection: `tenders`, Fields: `city` (asc), `createdAt` (desc)
- Collection: `tenders`, Fields: `userId` (asc), `createdAt` (desc)
- Collection: `listings`, Fields: `city` (asc), `createdAt` (desc)
- Collection: `listings`, Fields: `userId` (asc), `createdAt` (desc)
- Collection: `listings`, Fields: `status` (asc), `createdAt` (desc)
- Collection: `listings`, Fields: `deliveryOption` (asc), `createdAt` (desc)
- Collection: `bids`, Fields: `tenderId` (asc), `createdAt` (desc)
- Collection: `bids`, Fields: `userId` (asc), `createdAt` (desc)
- Collection: `messages`, Fields: `senderId` (asc), `recipientId` (asc), `createdAt` (asc)

### 6. App Integration

#### Step 1: Add Firebase Dependencies

Add the following dependencies to your `pubspec.yaml`:

```yaml
dependencies:
  firebase_core: ^2.7.0
  firebase_auth: ^4.2.2
  cloud_firestore: ^4.4.4
  firebase_storage: ^11.0.15
  firebase_messaging: ^14.3.0
  uuid: ^3.0.7
```

#### Step 2: Initialize Firebase

Initialize Firebase in your main.dart file:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(MyApp());
}
```

#### Step 3: Implement the BLoC Structure

1. Create the BLoC base classes
2. Implement repositories for Firebase services
3. Create specific BLoCs for Auth, Tenders, and Listings
4. Wire up the UI with BLoC providers

### 7. Key Implementation Features

#### User Authentication

The AuthBloc handles:
- User registration with email verification
- Login/logout
- Profile management
- Password reset

#### Tender Management

The TenderBloc processes:
- Creating/updating tenders
- Filtering tenders by various criteria
- Extending or closing tenders
- Managing tender favorites

#### Listing Management

The ListingBloc manages:
- Creating/updating listings
- Uploading and managing images
- Marking listings as sold
- Filtering listings
- Managing listing favorites

#### Data Synchronization

- Use Firestore's real-time listeners for live updates
- Handle offline capabilities with Firestore's caching

## Error Handling

Implement consistent error handling:
1. Use the `FirebaseErrorHandler` utility to convert Firebase errors to user-friendly messages
2. Emit appropriate error states from BLoCs
3. Display error messages in the UI

## Performance Considerations

1. **Query Optimization**:
   - Use compound queries to reduce document reads
   - Implement pagination for large result sets
   - Create appropriate Firestore indexes

2. **Image Optimization**:
   - Compress images before upload
   - Resize images on the client-side
   - Consider using Firebase Extensions for automatic image resizing

3. **Caching**:
   - Leverage Firestore's offline persistence
   - Implement local caching for frequently accessed data

## Testing

1. **Unit Testing**:
   - Test BLoCs using the `bloc_test` package
   - Mock Firebase services for testing repositories

2. **Integration Testing**:
   - Test the interaction between BLoCs and repositories
   - Use Firebase Emulator Suite for integration tests

3. **UI Testing**:
   - Test widgets with BLoC providers
   - Verify UI states match expected BLoC states

## Deployment

1. Configure Firebase for production
2. Set up proper security rules for production
3. Implement Firebase Analytics for monitoring
4. Set up Firebase Crashlytics for error reporting

## Additional Resources

- [Firebase Documentation](https://firebase.google.com/docs)
- [Flutter Firebase Plugins](https://github.com/firebase/flutterfire)
- [BLoC Pattern Documentation](https://bloclibrary.dev)
- [Firestore Security Rules Guide](https://firebase.google.com/docs/firestore/security/get-started)